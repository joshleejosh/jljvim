" Insert "filler" text.
" 
" License: MIT

" INIT STUFF                                               {{{1
"if exists("g:JLJLoremIpsumLoaded") || &cp
"  finish
"end
"let g:JLJLoremIpsumLoaded = 1

let s:path = expand("<sfile>:p:h")
let s:sentences = []
let s:numsents = 0

fun! <SID>ReadSentences()
  let datafn = s:path . "/../../jlj_loremipsum/sentences.txt"
  let s:sentences = readfile(datafn)
  let s:numsents = len(s:sentences)
endfun

" RANDOM NUMBERS                                           {{{1

let s:randoms = []
let s:nrands = 20

" Fill an array with numbers generated by a system call to the shell (`echo $RANDOM`)
fun! <SID>FillRand()
  let cmdstr = "echo "
  let i = 0
  while i < s:nrands
    let cmdstr = cmdstr . "$RANDOM "
    let i = i + 1
  endwhile
  let rs = system(cmdstr)
  let s:randoms = split(rs)
endfun

" Return an int in range [0,max)
fun! <SID>Rand(max)
  if len(s:randoms) == 0
    call <SID>FillRand()
  endif
  let i = len(s:randoms) - 1
  let n = s:randoms[i]
  unlet s:randoms[i]
  return n%a:max
endfun

fun! <SID>RandExcept(max, except)
  let rv = <SID>Rand(a:max - 1)
  if rv >= a:except
    return rv + 1
  else
    return rv
  endif
endfun

fun! TestRand(max, exc, n)
  let s = ""
  let i = 0
  while i < a:n
    let n = <SID>RandExcept(a:max, a:exc)
    let s = s . "\n" . n
    let i = i + 1
  endwhile
  let @" = s
  put
endfun

" PUBLIC API                                               {{{1

" LoremIpsum(number of paragraphs,
"            min sentences per paragraph,
"            max sentences per paragraph)
"
" All args are optional.
"
fun! JLJLoremIpsum(...)
  if s:numsents == 0 || len(s:sentences) == 0
    call <SID>ReadSentences()
    if s:numsents == 0 || len(s:sentences) == 0
      echo "LoremIpsum: ERROR loading sentences"
      return
    endif
  endif

  let numgrafs = 1
  let minSentsPerGraf = 3
  let maxSentsPerGraf = 6
  if a:0 > 0 && a:1 > 0
    let numgrafs = a:1
  endif
  if a:0 > 1 && a:2 > 0
    let minSentsPerGraf = a:2
    let maxSentsPerGraf = a:2
  endif
  if a:0 > 2 && a:3 > minSentsPerGraf
    let maxSentsPerGraf = a:3
  endif

  let grafs = []
  let kprev = s:numsents
  let i = 0

  while i < numgrafs
    let sents = []
    let nsents = minSentsPerGraf + <SID>Rand(maxSentsPerGraf - minSentsPerGraf + 1)
    let j = 0

    while j < nsents
      if i == 0 && j == 0
        let k = 0
      else
        let k = <SID>RandExcept(s:numsents, kprev)
      endif
      call add(sents, s:sentences[k])
      let kprev = k
      let j = j + 1
    endwhile
    call add(grafs, join(sents, " "))

    let i = i + 1
  endwhile
  
  let oldreg = @"
  let @" = join(grafs, "\n\n") . "\n\n"
  put
  let @" = oldreg
endfun

" COMMANDS & MAPPINGS                                      {{{1

command! -nargs=* LoremIpsum call JLJLoremIpsum(<f-args>)


" }}}
" vim: set foldmethod=marker foldlevel=0:
